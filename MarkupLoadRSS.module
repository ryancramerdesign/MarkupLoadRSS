<?php namespace ProcessWire;

/**
 * ProcessWire RSS loader for ProcessWire 3.x
 *
 * Given an RSS feed URL, this module will pull it, and let you foreach() it 
 * or render it. This module will also cache feeds that you retrieve with it.
 * 
 * Copyright (C) 2011-2018 by Ryan Cramer
 * License: MPL 2.0
 * 
 * @property bool $multibyteSupport
 * 
 *
 */

class MarkupLoadRSS extends WireData implements Module, \IteratorAggregate, \Countable {

	public static function getModuleInfo() {
		return array(
			'title' => 'Load an RSS feed', 
			'summary' => 'Given an RSS feed URL, this module will pull it, cache it, and let you foreach() it or render it.', 
			'version' => 200, 
			'singular' => false, 
			'autoload' => false, 
			'requires' => 'ProcessWire>=3.0',
			);
	}

	/**
	 * Configurable options provided by this module
	 *
	 */
	protected $options = array(

		'limit' => 10, 				// Max number of items to load from the feed (default: 10)
		'cache' => 120, 			// Number of seconds to cache, or 0 to skip caching (default = 2 minutes)
		'maxLength' => 2048,			// The max number of characters allowed in any text from the feed (typically to truncate the description)
		'stripTags' => true, 			// Strip any markup tags that appear in the feed? (default: true)
		'encodeEntities' => true, 		// Whether to automatically decode and re-encode the entities for all fields (default: true)
		'dateFormat' => "F j, Y, g:i a",	// Default date format to use when rendering the feed's output 

		// when stripTags is on, it will first replace perform these case insensitive replacements: 
		'replacements' => array(		
			'<br />' => ' ',
			'<br>' => ' ',
			'</p>' => ' ',
			"\n" => ' ',
			"\r" => ' ',
		),

		// markup customization for when using render():
		'listOpen' => "<ul class='MarkupLoadRSS'>",
		'listClose' => "</ul>",
		'itemOpen' => "<li>",
		'itemClose' => "</li>",
		'itemLinkOpen' => "<a href='{href}'>", 
		'itemLinkClose' => "</a>", 
		'itemDateOpen' => " <time datetime='{datetime}'>", 
		'itemDateClose' => "</time>", 
		'itemDescriptionOpen' => "<div>", 
		'itemDescriptionClose' => "</div>",
		); 

	/**
	 * Information about the RSS channel, populated after load()
	 *
	 */
	protected $channel = array(
		'title' => '',
		'description' => '', 
		'link' => '',
		'pubDate' => '', 
		'created' => 0, // same as pubDate but as a unix timestamp
		); 

	/**
	 * Items in the RSS feed, after they are loaded
	 *
	 */
	protected $items = null;

	/**
	 * Path where the XML cache file is stored
	 *
	 */
	protected $cachePath; 

	/**
	 * Last error that occurred
	 *
	 */
	protected $error = '';

	/**
	 * Construct
	 * 
	 */
	public function __construct() {
		$this->cachePath = $this->config->paths->cache . $this->className() . '/';
	}

	/**
	 * Define the cache path
	 *
	 * Should be done here in the construct rather than the init() because init() is not called on install/uninstall
	 *
	 */
	public function init() {
		$this->items = new WireArray();
		$this->multibyteSupport = function_exists("mb_strlen"); 
	}

	/**
	 * Set a configuration option
	 *
	 * @param string $key Option name
	 * @param string|int $value Option value
	 * @return $this|WireData
	 *
	 */
	public function set($key, $value) {
		if($key == 'options' && is_array($value)) {
			$this->options = array_merge($this->options, $value);
		} else if(array_key_exists($key, $this->options)) {
			$this->options[$key] = $value;
		} else {
			return parent::set($key, $value);
		}
		return $this;
	}

	/**
	 * Gets a config option or $channel info
	 * 
	 * @param string $key
	 * @return mixed
	 *
	 */
	public function get($key) {
		if($key == 'error') return $this->error; 

		//  translate common PW-style names to what they would be in the feed
		if($key == 'url') {
			$key = 'link';
		} else if($key == 'date') {
			$key = 'pubDate';
		} else if($key == 'body') {
			$key = 'description';
		}

		if(array_key_exists($key, $this->channel)) return $this->channel[$key]; 
		if(array_key_exists($key, $this->options)) return $this->options[$key];

		return parent::get($key);
	}

	/**
	 * Cleans text string from a feed before storage in our object
	 * 
	 * @param string $value
	 * @return string
	 *
	 */
	protected function cleanText($value) {

		if($this->options['stripTags']) {
			if(count($this->options['replacements'])) { 
				$value = str_ireplace(array_keys($this->options['replacements']), array_values($this->options['replacements']), $value); 
			}
			$value = trim(strip_tags($value)); 
		}

		if($this->multibyteSupport) {
			if(mb_strlen($value, "UTF-8") > $this->options['maxLength']) {
				$value = mb_substr($value, 0, $this->options['maxLength'], "UTF-8");
			}
		} else {
			if(strlen($value) > $this->options['maxLength']) {
				$value = substr($value, 0, $this->options['maxLength']);
			}
		}

		if($this->options['encodeEntities']) {
			$sanitizer = $this->wire('sanitizer');
			$value = $sanitizer->unentities($value);
			$value = $sanitizer->entities($value);
		}

		return $value; 
	}

	/**
	 * Load an RSS feed from the given URL
	 *
	 * @param string $url Full URL to RSS feed (including http://)
	 * @return $this
	 *
	 */
	public function load($url) {

		$this->items = new WireArray();
		$xmlData = $this->loadXmlData($url); 
		$rss = simplexml_load_string($xmlData);

		if(!$rss) {
			$msg = "Unable to load RSS feed at $url: \n";
			foreach(libxml_get_errors() as $error) $msg .= $error . " \n";
			$this->error($msg); 
			return $this;
		}

		$this->channel['title'] = $this->cleanText((string) $rss->channel->title);
		$this->channel['description'] = $this->cleanText((string) $rss->channel->description);
		$this->channel['link'] = $this->cleanText((string) $rss->channel->link);
		$this->channel['created'] = strtotime((string) $rss->channel->pubDate); 
		$this->channel['pubDate'] = wireDate($this->options['dateFormat'], $this->channel['created']); 

		$n = 0;

		foreach($rss->channel->item as $item) {

			$a = new MarkupLoadRSSItem();

			foreach($item as $key => $value) {

				$value = (string) $value; 

				if($key == 'pubDate') {
					$value = strtotime($value); 
					$a->set('created', $value); 
					$value = wireDate($this->options['dateFormat'], $value); 

				} else if ($key == 'enclosure') {
					$value = $item->enclosure['url'];
					
				} else { 
					$value = $this->cleanText($value);
				}

				$a->set($key, $value);
			}

			$this->items->add($a); 

			if(++$n >= $this->options['limit']) break;
		}

		return $this; 
	}


	/**
	 * Load XML data from either the RSS URL or the cache file
	 * 
	 * @param string $url
	 * @return bool|string
	 *
	 */
	protected function loadXmlData($url) {

		$cacheFile = $this->cachePath . md5($url) . '.xml.cache';

		if(!is_file($cacheFile) || time() - filemtime($cacheFile) > $this->options['cache']) {
			$http = new WireHttp();
			$this->wire($http);
			$xmlData = $http->get($url);
			if(empty($xmlData)) {
				$this->error("Unable to load: $url");
				return false;
			} else if($this->options['cache']) {
				@file_put_contents($cacheFile, $xmlData, LOCK_EX);
			}
		} else {
			$xmlData = file_get_contents($cacheFile); 
			if($xmlData === false) {
				$this->error("Unable to load XML data cache");
				return false;
			}
		}

		return $xmlData; 	
	}

	/**
	 * Render the markup for data retrieved from the RSS feed
	 * 
	 * @param string $url
	 * @return string
	 *
	 */
	public function render($url = '') {
		if($url) $this->load($url); 
		$out = $this->options['listOpen']; 
		foreach($this as $item) {
			$out .= $this->renderItem($item); 
		}
		$out .= $this->options['listClose']; 
		return $out; 
	}

	/**
	 * Render a single item, as used by the render() method
	 * 
	 * @param MarkupLoadRSSItem $item
	 * @return string
	 *
	 */
	protected function renderItem(MarkupLoadRSSItem $item) {
		$out = 
			$this->options['itemOpen'] . 
			str_replace('{href}', $item->link, $this->options['itemLinkOpen']) . 
			htmlentities($item->title, ENT_QUOTES, "UTF-8") . 	
			$this->options['itemLinkClose'] . 
			str_replace('{datetime}', date('c', $item->created), $this->options['itemDateOpen']) . 
			wireDate($this->options['dateFormat'], $item->created) . 
			$this->options['itemDateClose'] . 
			$this->options['itemDescriptionOpen'] . $item->description . $this->options['itemDescriptionClose'] . 
			$this->options['itemClose']; 

		return $out; 
	}

	/**
	 * Make this class iterable
	 * 
	 * @return WireArray
	 *
	 */
	public function getIterator() {
		return $this->items; 		
	}

	/**
	 * Make this class countable
	 * 
	 * return int
	 *
	 */
	public function count() {
		return count($this->items); 
	}

	/**
	 * Create a directory where we will store our cache files
	 *
	 */
	public function ___install() {
		$path = $this->cachePath; 
		if(!is_dir($path)) {
			if(!wireMkdir($path)) throw new WireException("Unable to create directory: $path"); 
		}
	}

	/**
	 * Remove cache files and directory
	 *
	 */
	public function ___uninstall() {
		if(!is_dir($this->cachePath)) return;
		$dir = new \DirectoryIterator($this->cachePath); 
		foreach($dir as $file) {
			if($file->isDir() || $file->isDot()) continue;
			if($file->isFile() && preg_match('/\.xml.cache$/', $file->getFilename())) unlink($file->getPathname());
		}
		wireRmdir($this->cachePath); 
	}

	/**
	 * Save the error message and send it on to PW
	 * 
	 * @param string $text
	 * @param int $flags
	 * @return $this|WireData
	 *
	 */
	public function error($text, $flags = 0) {
		$this->error = $text; 		
		return parent::error($text, $flags); 
	}


}

/**
 * Class to store data for an individual RSS item
 * 
 * @property string $title
 * @property string $description
 * @property int $created
 * @property string $link
 * @property string $url Alias of 'link'
 * @property string $pubDate
 * @property string $date Alias of 'pubDate'
 *
 */
class MarkupLoadRSSItem extends WireData { 

	/**
	 * Translate common PW-Page style var names to RSS feed names, for consistency/convenience
	 * 
	 * @param string $key
	 * @return mixed
	 *
	 */
	public function get($key) {
		if($key == 'url') $key = 'link';
			else if($key == 'date') $key = 'pubDate';
			else if($key == 'body') $key = 'description'; 
		return parent::get($key); 
	}

}



